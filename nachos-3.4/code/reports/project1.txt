PROJECT 1 REPORT
GROUP 15

Kristy Hamlin
Annie Nguyen
Trang Trang

Note to graders: We were not consistent in using the "CHANGED" flag for all changes. However, Nachos should still running
in the default settings and run our tests as expected with the different flags specified for Project 1. 

EXERCISE 1 NOTES

After updating the code for SimpleThread() and testing values 0-4, I was originally confused by a couple things. Firstly, 
the output for n=0 and n=1 is identical except n=0 claims that “0 threads are running”, however this is easily explained
by the fact that the for loop inside the updated ThreadTest() evaluates to false for both n=0 and n=1, and only calls 
SimpleThread(0). 

The second thing that confused me is that for all tests 0 through 4, all threads looped in order, saw the same shared value,
and then saw the same final value. I was not sure if they were already synchronized. But after looking at the code, I 
believe that proper synchronization will allow the threads to take turns adding 1 at each stage, thus they should all 
see increments of 1, but still see the same final value. I will implement the semaphores and see. 

After implementing the semaphores, I can see that now the threads each take turns incrementing the value by 1,
and then they all see the same value at the end. Even when the -rs value is used the threads take turns out of order.

EXCERCISE 2 NOTES
Excercise 2 is mostly complete. Our main issue is being able to do the lock test. The four functions are implemented in synch.cc as well as a locktest.cc file was created for testing in the threads folder.
In main.cc //extern void LockTest(void);// was added an as external function. HW1_LOCKS is defined in line 128 in main.cc.
locktest.cc was added to block THREAD_C in code/makefile.common as well as locktest.o in block THREAD_O. 
After being ran with the given instructions, the output is not the desired output.

EXCERCISE 3 NOTES
Excercise 3 is complete, all condition functions are implemented.


EXCERCISE 4 NOTES

We decided to implement the Elevator problem using semaphores and global variables rather than condition variables.
Our group was having trouble implementing the locks, but had the semaphores working. Therefore, our solution to the
elevator problem uses semaphores that control access to global variables that keep track of the current floor
of the elevator, number of people waiting, etc. 

The only requirement our implementation does not currently fulfill is the requirement that the elevator can restart
once it is stopped. Our implementation has a switch that turns off once all people have been served, but once off
there is no code to call start(int numFloors) again from the elevator thread side. I assume that all people
will be created at the beginning of the test and hope that this is not a large shortcoming. We could have allowed
the elevator to cycle forever which would be an easy solution, but we thought it would be nice for the TAs 
to not have to deal with eternal prints to the console. :) 

The code contains comments that should help you to read and understand what is going on. The elevator demo
works using teh ElevatorTest.cc code. 


